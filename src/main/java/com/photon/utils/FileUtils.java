package com.photon.utils;

import com.photon.data.CoreModel;
import com.photon.data.GitRepository;
import com.photon.data.SubModule;

import java.io.*;
import java.util.*;
import java.util.regex.Matcher;

public class FileUtils {

    public static final String COMMENT = "//";
    public static final String TAB = "        ";

    //public static final String TAB_SMALL = "      ";
    //public static final String TAG_S = "//" + TAB_SMALL + "Auto generated by plugin-S";
    //public static final String TAG_E = "//" + TAB_SMALL + "Auto generated by plugin-E";

    public static final String mSrcStrFormat = "compile project(':%s')";
    public static final String mvnStrFormat = "compile \"%s\"";

    public static void main(String[] args) {

        File file = new File("C:\\\\drive");
        FileUtils lObj = new FileUtils();
        String lSrcName = "custom-ui-kit";
        String lDesName = "com.usable.walgreens:custom-ui-kit:v.1.0";
        // lObj.switchToMVNDept(lSrcName, lDesName);
        //lObj.switchToSourceDept(lDesName, lSrcName);
    }

    public static void search(File aFile, String aFileName, ArrayList<String> aResult) {
        if (aFile.isDirectory()) {

            //File Filter
            if (aFile.getName().equals("src") || aFile.getName().equals("res") || aFile.getName().equals("build")
                    || aFile.getName().startsWith(".") || aFile.getName().startsWith("libs")) {
                return;
            }
            System.out.println("Searching directory ... " + aFile.getAbsoluteFile());
            for (File temp : aFile.listFiles()) {
                search(temp, aFileName, aResult);
            }
        } else if (aFileName.equals(aFile.getName().toLowerCase())) {
            aResult.add(aFile.getAbsoluteFile().toString());
        }
    }

    public static final void switchToMVNDept(ArrayList<String> aFileList, String lSrcName, String lMvnDesName) {
        for (String lFileName : aFileList) {
            switchToMVNDept(lFileName, lSrcName, lMvnDesName);
        }
    }

    public static final void switchToSourceDept(ArrayList<String> aFileList, String lMvnDesName, String lSrcName) {
        for (String lFileName : aFileList) {
            switchToSourceDept(lFileName, lMvnDesName, lSrcName);
        }
    }

    public static final void switchToMVNDept(String lFileStr, String lSrcName, String lDesName) {
        File lFile = new File(lFileStr);
        File lFile1 = new File("temp");
        if (!lFile.exists()) {
            System.out.println("File is Missing! --> " + lFile.getAbsolutePath());
            return;
        }
        BufferedReader br = null;
        BufferedWriter bw = null;

        try {
            br = new BufferedReader(new FileReader(lFile));
            bw = new BufferedWriter(new FileWriter(lFile1));

            String lLine = "";
            String lSrcStr = String.format(mSrcStrFormat, lSrcName);

            while ((lLine = br.readLine()) != null) {

                if (lLine.contains(lSrcStr)) {

                    lLine = COMMENT.concat(lLine);
                    if (lFile.exists()) {
                        System.out.println("N " + lFile.getAbsolutePath());
                    }
                    try {
                        // bw.write(TAG_S);
                        // bw.newLine();
                        // bw.write(COMMENT.concat(TAB_SMALL).concat(lSrcStr));
                        // bw.newLine();
                        String lDesStr = TAB + String.format(mvnStrFormat, lDesName);
                        bw.write(lDesStr);
                        bw.newLine();
                        // bw.write(TAG_E);
                        // bw.newLine();
                    } catch (Exception e) {

                    }
                } else {
                    bw.write(lLine);
                    bw.newLine();
                }

            }
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        } catch (IOException ex) {
            ex.printStackTrace();
        } catch (Exception ex) {
            ex.printStackTrace();
        } finally {
            try {

                if (null != br) {
                    br.close();
                }
                if (null != bw) {
                    bw.flush();
                    bw.close();
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        lFile.delete();
        lFile1.renameTo(lFile);
    }

    public static final void switchToSourceDept(String lFileStr, String aMvnInfoStr, String aSourceName) {

        File lFile = new File(lFileStr);
        File lFile1 = new File("temp");

        if (!lFile.exists()) {
            System.out.println("File is Missing! --> " + lFile.getAbsolutePath());
            return;
        }

        BufferedReader br = null;
        BufferedWriter bw = null;

        try {
            br = new BufferedReader(new FileReader(lFile));
            bw = new BufferedWriter(new FileWriter(lFile1));

            String lLine = "";
            String lSrcStr = String.format(mvnStrFormat, aMvnInfoStr);

            while ((lLine = br.readLine()) != null) {

                if (lLine.contains(lSrcStr)) {

                    try {
                        // bw.write(TAG_S);
                        // bw.newLine();
                        // bw.write(COMMENT.concat(TAB_SMALL).concat(lSrcStr));
                        // bw.newLine();
                        String lDesStr = TAB + String.format(mSrcStrFormat, aSourceName);
                        bw.write(lDesStr);
                        bw.newLine();
                        // bw.write(TAG_E);
                        // bw.newLine();
                    } catch (Exception e) {

                    }
                } else {
                    bw.write(lLine);
                    bw.newLine();
                }

            }
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        } catch (IOException ex) {
            ex.printStackTrace();
        } catch (Exception ex) {
            ex.printStackTrace();
        } finally {
            try {

                if (null != br) {
                    br.close();
                }
                if (null != bw) {
                    bw.flush();
                    bw.close();
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        lFile.delete();
        lFile1.renameTo(lFile);
    }

    //@deprecated
    public static List<SubModule> buildModules(File aFile) {

        if (null == aFile || !aFile.exists()) {
            return null;
        }
        List<SubModule> lList = new ArrayList<SubModule>();
        try {
            BufferedReader lReader = new BufferedReader(new FileReader(aFile));
            SubModule lModule = null;
            String lTemp = null;
            String lLine = lReader.readLine();

            while (null != lLine) {

                int lStart = lLine.indexOf("'");
                int lEnd = lLine.lastIndexOf("'");
                if (-1 == lStart || -1 == lEnd ||
                        lStart > lLine.length() ||
                        lEnd > lLine.length()) {
                    lLine = lReader.readLine();
                    continue;
                }
                lTemp = lLine.substring(lStart + 1, lEnd);
                if (lLine.startsWith(Constants.TOKEN_INCLUDE)) {
                    lTemp = lTemp.replace(":", "");
                    lModule = new SubModule(lTemp);
                    lList.add(lModule);
                } else if (lLine.startsWith(Constants.TOKEN_MVN)) {
                    lModule.setMvnInfo(lTemp);
                } else if (lLine.startsWith(Constants.TOKEN_TYPE)) {
                    lTemp = lTemp.substring(1, lTemp.length() - 1);
                    lModule.setSupportedModuleType(lTemp.split(","));
                } else if (lLine.startsWith(Constants.TOKEN_PATH)) {
                    lModule.setSourcePath(lTemp);
                }
                if (Constants.DEBUG) {
                    System.out.println("[Pattern] [" + lTemp + "]");
                }
                lLine = lReader.readLine();
            }
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }

        /**
         * Initialize the module type. If nothing is selected consider the "0th" item as
         * Module type. If the module don't have any module type, consider the type as "Source".
         * Default module type is source.
         */
        for (SubModule lMod : lList) {
            String[] lTypes = lMod.getSupportedModuleType();
            if (null != lTypes && lTypes.length > 0) {
                lMod.setModuleType(lTypes[0]);
            } else {
                lMod.setModuleType(Constants.Module.SOURCE.getTypeStrValue());
            }
        }
        return lList;
    }

    public static CoreModel parseSettingsFile(String aGradlePropPath, String aSettingsPath) {

        CoreModel lModel = new CoreModel();

        if (null == aGradlePropPath || 0 == aGradlePropPath.length() || null == aSettingsPath
                || 0 == aSettingsPath.length()) {
            return lModel;
        }

        File lGradleFile = new File(aGradlePropPath);
        File lSettingsFile = new File(aSettingsPath);
        if (null == lGradleFile || !lGradleFile.exists()) {
            return lModel;
        }
        if (null == lSettingsFile || !lSettingsFile.exists()) {
            return lModel;
        }

        Set<SubModule> lModSet = new HashSet<SubModule>();
        Set<GitRepository> lRepoSet = new HashSet<GitRepository>();

        Properties lProperty = new Properties();
        BufferedReader lReader = null;
        SubModule lTModule = null;
        GitRepository lRepo = null;

        try {
            lReader = new BufferedReader(new FileReader(lSettingsFile));
            lProperty.load(new FileInputStream(lGradleFile));
            String lLine = lReader.readLine();
            while (null != lLine) {

                if (lLine.length() > 0) {

                    //For Commented Lines, move ahead
                    if (lLine.startsWith("//")) {
                        System.out.println("....Skipping line while parsing...");
                        lLine = lReader.readLine();
                    }
                    // Check for dynamic value
                    lLine = checkForDynamicVar(lLine, lProperty);

                    // Check for repository
                    lRepo = buildRepo(lLine, lRepo);
                    if (null != lRepoSet) {
                        lRepoSet.add(lRepo);
                    }

                    // Check for module
                    lTModule = buildModules(lLine, lTModule);
                    if (null != lTModule) {
                        lModSet.add(lTModule);
                    }
                }

                lLine = lReader.readLine();

            }
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            if (null != lReader) {
                try {
                    lReader.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }

        //System.out.println(lModSet.size());
        //System.out.println(lRepoSet.size());
        configureModuleType(lModSet);

        lModel.setModuleSet(lModSet);
        lModel.setRepositorySet(lRepoSet);
        return lModel;
    }

    private static GitRepository buildRepo(String aLine, GitRepository aRepo) {

        String lTemp = extractValue(aLine);
        if (aLine.startsWith("repo_name")) {
            aRepo = new GitRepository();
            aRepo.setRepoName(lTemp);
        } else if (aRepo != null && aLine.startsWith("repo_url")) {
            aRepo.setBaseURI(lTemp);
        } else if (aRepo != null && aLine.startsWith("repo_branch")) {
            aRepo.setBranch(lTemp);
        }
        return aRepo;
    }

    private static String checkForDynamicVar(String aLine, Properties aProperty) {

        Matcher matcher = Constants.DYNAMIC_VAR_PATTERN.matcher(aLine);

        Map<String, String> lMap = new HashMap<>();
        String lKey = "";

        while (matcher.find()) {
            lKey = matcher.group();
            lMap.put(lKey, aProperty.getProperty(lKey.substring(2, lKey.length() - 1)));
        }

        for (String key : lMap.keySet()) {
            aLine = aLine.replace(key, lMap.get(key));
        }

        return aLine;
    }

    public static SubModule buildModules(String lLine, SubModule aModule) {

        String lTemp = extractValue(lLine);

        if (lLine.startsWith(Constants.TOKEN_INCLUDE)) {
            lTemp = lTemp.replace(":", "");
            aModule = new SubModule(lTemp);
        } else if (null != aModule && lLine.startsWith(Constants.TOKEN_MVN)) {
            aModule.setMvnInfo(lTemp);
        } else if (null != aModule && lLine.startsWith(Constants.TOKEN_TYPE)) {
            lTemp = lTemp.substring(1, lTemp.length() - 1);
            aModule.setSupportedModuleType(lTemp.split(","));
        } else if (null != aModule && lLine.startsWith(Constants.TOKEN_PATH)) {
            aModule.setSourcePath(lTemp);
        } else if (null != aModule && lLine.startsWith(Constants.TOKEN_REPO)) {
            aModule.setRepoName(lTemp);
        }
        return aModule;
    }

    private static String extractValue(String lLine) {
        int lStart = lLine.indexOf("'");
        int lEnd = lLine.lastIndexOf("'");

        if (-1 == lStart || -1 == lEnd || lStart > lLine.length() || lEnd > lLine.length()) {
            return null;
        }
        return lLine.substring(lStart + 1, lEnd);
    }

    /**
     * Initialize the module type. If nothing is selected consider the "0th"
     * item as Module type. If the module don't have any module type, consider
     * the type as "Source". Default module type is source.
     */
    private static void configureModuleType(Set<SubModule> aModuleList) {
        for (SubModule lMod : aModuleList) {
            String[] lTypes = lMod.getSupportedModuleType();
            if (null != lTypes && lTypes.length > 0) {
                lMod.setModuleType(lTypes[0]);
            } else {
                lMod.setModuleType(Constants.Module.SOURCE.getTypeStrValue());
            }
        }
    }

    public static boolean hasGit(File aPath) {

        if (null == aPath || !aPath.exists() || !aPath.isDirectory()) {
            return false;
        }
        File[] lFile = aPath.listFiles();

        for (File file : lFile) {
            if (Constants.DOT_GIT_FILE.equalsIgnoreCase(file.getName())) {
                return true;
            }
        }
        return false;
    }
}
